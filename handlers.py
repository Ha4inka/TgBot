import json
import logging
import os

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from api.api import InstagramAPI
from config import DEEPSEEK_API_KEY, DEEPSEEK_API_URL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_state = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ DeepSeek API
async def get_deepseek_response(user_message):
    headers = {
        "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "deepseek/deepseek-r1:free",
        "messages": [
            {"role": "system", "content": "–¢–∏ AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞, —è–∫–∏–π –¥–æ–ø–æ–º–∞–≥–∞—î –∫–µ—Ä—É–≤–∞—Ç–∏ Instagram. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à —á—ñ—Ç–∫–æ –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –±–µ–∑ –∑–∞–π–≤–æ–≥–æ."},
            {"role": "user", "content": user_message}
        ],
        "max_tokens": 500,
        "temperature": 0.7
    }

    try:
        response = requests.post(DEEPSEEK_API_URL, headers=headers, data=json.dumps(data))
        response.raise_for_status()
        response_data = response.json()
        logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å DeepSeek API: {response_data}")
        return response_data['choices'][0]['message']['content']

    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ DeepSeek API: {e}")
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
    except (KeyError, IndexError, json.JSONDecodeError) as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ DeepSeek API: {e}")
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."


# /start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º
async def start(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id #–û—Ç—Ä–∏–º—É—î–º–æ id
    #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è
    if user_id not in context.bot_data['instagram_api']:
        context.bot_data['instagram_api'][user_id] = InstagramAPI(context.bot_data['db_session']) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
        # –Ø–∫—â–æ –ø–æ—Ç—Äi–±–Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è i–Ωi—Üi–∞–ª–∑–∞—Üi—è, —Ä–æ–±–∏–º–æ —Ü–µ —Ç—É—Ç.
        await context.bot_data['instagram_api'][user_id].load_session() # –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
    print("-->>Start function")
    keyboard = [
        [InlineKeyboardButton("–£–≤—ñ–π—Ç–∏ –≤ Instagram", callback_data="login")],
        [InlineKeyboardButton("–í–∏–π—Ç–∏ –∑ Instagram", callback_data="logout")],
        [InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="get_stats")],
        [InlineKeyboardButton("–ó–∞–ø–æ—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data="post_photo")],
        [InlineKeyboardButton("–ó–∞–ø–æ—Å—Ç–∏—Ç–∏ —Å—Ç–æ—Ä—ñ—Å", callback_data="post_story")],
        [InlineKeyboardButton("–î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ç–≤–æ—ó–º Instagram. –©–æ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=reply_markup
    )

# /help - –î–æ–ø–æ–º–æ–≥–∞
async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
        "/help - –î–æ–ø–æ–º–æ–≥–∞\n"
        "/stats - –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/login - –£–≤—ñ–π—Ç–∏ –≤ Instagram (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /login user:<username> password:<password>)\n"
        "/logout - –í–∏–π—Ç–∏ –∑ Instagram"
    )


async def login_command(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /login."""
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è InstagramAPI –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in context.bot_data['instagram_api']:
        context.bot_data['instagram_api'][user_id] = InstagramAPI(context.bot_data['db_session'])

    insta_api = context.bot_data['instagram_api'][user_id]
    insta_api.user_id = user_id # –î–æ–¥–∞–Ω–æ

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–¥—É 2FA
    if user_id in user_state and user_state[user_id] == "waiting_for_2fa_code":
        # –û–±—Ä–æ–±–∫–∞ –≤–≤–æ–¥—É –∫–æ–¥—É 2FA
        code = update.message.text.strip()
        login_success = await insta_api.complete_2fa_login(code)
        if login_success:
            await update.message.reply_text("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ –∑ 2FA!")
            del user_state[user_id]  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ 2FA. –ü–æ—á–Ω—ñ—Ç—å –≤—Ö—ñ–¥ –∑–Ω–æ–≤—É –∑ /login.")
            del user_state[user_id]  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω —É —Ä–∞–∑—ñ –Ω–µ–≤–¥–∞—á—ñ
        return #–ó–∞–≤–µ—Ä—à—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —â–æ–± –Ω–µ –æ–±—Ä–æ–±–ª—è–ª–æ—Å—å –¥–∞–ª—ñ.

    # –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ª–æ–≥—ñ–Ω—É (–≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –∑ –∫–æ–º–∞–Ω–¥–∏)
    parts = update.message.text.split()
    if len(parts) >= 3 and parts[0] == '/login':
        try:
            login_part = parts[1].split(":")
            password_part = parts[2].split(":")

            if len(login_part) == 2 and login_part[0] == "user" and len(password_part) == 2 and password_part[0] == "password":
                username = login_part[1].strip()
                password = password_part[1].strip()

                login_success = await insta_api.login(username, password)
                if login_success:
                    await update.message.reply_text("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω!")
                elif insta_api._last_login_result is False:
                    await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                elif insta_api._last_login_result is None:
                    await insta_api.request_2fa_code(context, update)
                    user_state[user_id] = "waiting_for_2fa_code"  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
                else:
                    await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–π—Ç–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

            else:
                await update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /login user:<username> password:<password>")
        except Exception as e:
            await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ /login: {e}")


    else:
        await update.message.reply_text("–î–ª—è –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ: /login user:<username> password:<password>")

# /logout - –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –≤–∏—Ö–æ–¥—É (–ù–û–í–ò–ô)
async def logout_command(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è InstagramAPI –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in context.bot_data['instagram_api']:
        context.bot_data['instagram_api'][user_id] = InstagramAPI(context.bot_data['db_session'])
    insta_api = context.bot_data['instagram_api'][user_id]
    insta_api.user_id = user_id

    if await insta_api.logout():
        await update.message.reply_text("‚úÖ –í–∏ –≤–∏–π—à–ª–∏ –∑ Instagram.")
        del context.bot_data['instagram_api'][user_id] #Remove API instance

    else:
        await update.message.reply_text("–í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ.")


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –ó–∞–≤–∂–¥–∏ –≤–∏–∫–ª–∏–∫–∞–π—Ç–µ query.answer()
    user_id = query.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è InstagramAPI –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in context.bot_data['instagram_api']:
        context.bot_data['instagram_api'][user_id] = InstagramAPI(context.bot_data['db_session']) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    insta_api = context.bot_data['instagram_api'][user_id]
    insta_api.user_id = user_id

    if query.data == "login":
        await query.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /login, –≤–∞—à –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ: /login user:<username> password:<password>")
    elif query.data == "logout":
        await logout_command(update, context)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –æ–±—Ä–æ–±–ª—é—î –∫–æ–º–∞–Ω–¥—É
    elif query.data == "get_stats":
        if insta_api.is_logged_in:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω—ñ
            stats = await insta_api.get_user_stats()
            if stats:
                stats_message = "\n".join([f"{key}: {value}" for key, value in stats.items()])
                await query.message.reply_text(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{stats_message}")
            else:
                await query.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        else:
            await query.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ Instagram (/start -> –£–≤—ñ–π—Ç–∏ –≤ Instagram (/login)).")

    elif query.data == "post_photo":

            if insta_api.is_logged_in:
                await query.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:")
                user_state[user_id] = "waiting_for_photo"
            else:
                await query.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ Instagram (/start -> –£–≤—ñ–π—Ç–∏ –≤ Instagram (/login)).")
    elif query.data == "post_story":
          if insta_api.is_logged_in:
            await query.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ —Å—Ç–æ—Ä—ñ—Å:")
            user_state[user_id] = "waiting_for_story_photo"
          else:
            await query.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ Instagram (/start -> –£–≤—ñ–π—Ç–∏ –≤ Instagram (/login)).")
    elif query.data == "help":
        await help_command(update, context)


# –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è InstagramAPI –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in context.bot_data['instagram_api']:
        context.bot_data['instagram_api'][user_id] = InstagramAPI(context.bot_data['db_session'])

    insta_api = context.bot_data['instagram_api'][user_id]
    insta_api.user_id = user_id

    if user_id in user_state:
        if user_state[user_id] == "waiting_for_caption":
            photo_path = user_state.get(f"{user_id}_photo_path")
            if photo_path:
                if insta_api.is_logged_in:
                    try:
                        await insta_api.post_photo(photo_path, text)  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —à–ª—è—Ö
                        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó: {e}")
                    finally:
                        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞–æ–≤–∏–π —Ñ–∞–π–ª
                        try:

                            os.remove(photo_path)
                        except FileNotFoundError:
                            pass

                else:
                    await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ Instagram (/start -> –£–≤—ñ–π—Ç–∏ –≤ Instagram (/login)).")
            else:
                await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω–∏
            del user_state[user_id]
            del user_state[f"{user_id}_photo_path"]

        elif user_state[user_id] == "waiting_for_story_caption":
            photo_path = user_state.get(f"{user_id}_story_photo_path")  # –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
            if photo_path:
                if insta_api.is_logged_in:
                    try:
                        await insta_api.post_story(photo_path)
                        await update.message.reply_text("‚úÖ –°—Ç–æ—Ä—ñ—Å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                    except Exception as e:
                        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–æ—Ä—ñ—Å: {e}")
                    finally:
                         # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞–æ–≤–∏–π —Ñ–∞–π–ª
                        try:

                            os.remove(photo_path)
                        except FileNotFoundError:
                            pass

            else:
                await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–æ—Ä—ñ—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

             # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω–∏
            del user_state[user_id]
            del user_state[f"{user_id}_story_photo_path"]
        elif user_state[user_id] == "waiting_for_2fa_code":
          await login_command(update,context) #–ü–µ—Ä–µ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –Ω–∞–∑–∞–¥ –≤ login_command
    else:
        response = await get_deepseek_response(text)  # AI, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞
        await update.message.reply_text(response)

async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤–∂–µ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è InstagramAPI –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in context.bot_data['instagram_api']:
        context.bot_data['instagram_api'][user_id] = InstagramAPI(context.bot_data['db_session'])

    insta_api = context.bot_data['instagram_api'][user_id]
    insta_api.user_id = user_id


    if user_id in user_state:
        if user_state[user_id] == "waiting_for_photo":
            photo_file = await update.message.photo[-1].get_file()
            photo_path = f"{photo_file.file_unique_id}.jpg"  # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è
            await photo_file.download_to_drive(photo_path)
            user_state[f"{user_id}_photo_path"] = photo_path  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è —Ñ–æ—Ç–æ:")
            user_state[user_id] = "waiting_for_caption"
            return

        elif user_state[user_id] == "waiting_for_story_photo":
            photo_file = await update.message.photo[-1].get_file()
            photo_path = f"story_{photo_file.file_unique_id}.jpg"
            await photo_file.download_to_drive(photo_path)

            user_state[f"{user_id}_story_photo_path"] = photo_path  # Corrected path
            await update.message.reply_text("–ü—É–±–ª—ñ–∫—É—é —Å—Ç–æ—Ä—ñ—Å...")
            if insta_api.is_logged_in:
                try:
                    await insta_api.post_story(photo_path)
                    await update.message.reply_text("‚úÖ –°—Ç–æ—Ä—ñ—Å –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Å—Ç–æ—Ä—ñ—Å: {e}")
                finally:
                     # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞–æ–≤–∏–π —Ñ–∞–π–ª
                    try:

                        os.remove(photo_path)
                    except FileNotFoundError:
                        pass
            else:
                await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ Instagram (/start -> –£–≤—ñ–π—Ç–∏ –≤ Instagram (/login)).")

            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
            del user_state[user_id]
            del user_state[f"{user_id}_story_photo_path"] #–£–¥–∞–ª—è–µ–º story_photo_path
            return

    await update.message.reply_text("–Ø –æ—á—ñ–∫—É—é –≤—ñ–¥ –≤–∞—Å —ñ–Ω—à—ñ –¥—ñ—ó. –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –º–µ–Ω—é /start.")
